// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Functional Tests Basic: basic - Index file 1`] = `
"export * from \\"./document\\"
export * from \\"./presentation\\"
export * from \\"./spreadsheet\\"
"
`;

exports[`Functional Tests Basic: basic - document 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const DocumentModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.string(),
  created: z.date(),
  updated: z.date(),
})

export class DocumentDto extends createZodDto(DocumentModel) {
}
"
`;

exports[`Functional Tests Basic: basic - presentation 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const PresentationModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.string().array(),
  created: z.date(),
  updated: z.date(),
})

export class PresentationDto extends createZodDto(PresentationModel) {
}
"
`;

exports[`Functional Tests Basic: basic - spreadsheet 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const SpreadsheetModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.json(),
  created: z.date(),
  updated: z.date(),
})

export class SpreadsheetDto extends createZodDto(SpreadsheetModel) {
}
"
`;

exports[`Functional Tests Config Import: config-import - Index file 1`] = `
"export * from \\"./document\\"
"
`;

exports[`Functional Tests Config Import: config-import - document 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import * as imports from \\"../prisma/zod-utils\\"

export const DocumentModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.string(),
  size: z.from(imports.decimalSchema),
  created: z.date(),
  updated: z.date(),
})

export class DocumentDto extends createZodDto(DocumentModel) {
}
"
`;

exports[`Functional Tests Config Without Dto: config-no-dto - Index file 1`] = `
"export * from \\"./document\\"
"
`;

exports[`Functional Tests Config Without Dto: config-no-dto - document 1`] = `
"import * as z from \\"nestjs-zod/z\\"

export const DocumentModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.string(),
  created: z.date(),
  updated: z.date(),
})
"
`;

exports[`Functional Tests Config: config - Index file 1`] = `
"export * from \\"./user\\"
export * from \\"./post\\"
"
`;

exports[`Functional Tests Config: config - post 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompleteUser, userSchema } from \\"./index\\"

export const _postSchema = z.object({
  id: z.string(),
  title: z.string(),
  contents: z.string(),
  userId: z.string(),
})

export class PostDto extends createZodDto(_postSchema) {
}

export interface CompletePost extends z.infer<typeof _postSchema> {
  author: CompleteUser
}

/**
 * postSchema contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const postSchema: z.ZodSchema<CompletePost> = z.lazy(() => _postSchema.extend({
  author: userSchema,
}))
"
`;

exports[`Functional Tests Config: config - user 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompletePost, postSchema } from \\"./index\\"

export const _userSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
})

export class UserDto extends createZodDto(_userSchema) {
}

export interface CompleteUser extends z.infer<typeof _userSchema> {
  posts: CompletePost[]
}

/**
 * userSchema contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const userSchema: z.ZodSchema<CompleteUser> = z.lazy(() => _userSchema.extend({
  posts: postSchema.array(),
}))
"
`;

exports[`Functional Tests Different Client Path: different-client-path - Index file 1`] = `
"export * from \\"./document\\"
"
`;

exports[`Functional Tests Different Client Path: different-client-path - document 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const DocumentModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.string(),
  created: z.date(),
  updated: z.date(),
})

export class DocumentDto extends createZodDto(DocumentModel) {
}
"
`;

exports[`Functional Tests Docs: docs - Index file 1`] = `
"export * from \\"./post\\"
"
`;

exports[`Functional Tests Docs: docs - post 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const PostModel = z.object({
  /**
   * The unique identifier for the post
   * @default {Generated by database}
   */
  id: z.string().uuid(),
  /**
   * A brief title that describes the contents of the post
   */
  title: z.string().max(255, { message: \\"The title must be shorter than 256 characters\\" }),
  /**
   * The actual contents of the post.
   */
  contents: z.string().max(10240),
})

export class PostDto extends createZodDto(PostModel) {
}
"
`;

exports[`Functional Tests Imports: imports - Index file 1`] = `
"export * from \\"./document\\"
export * from \\"./presentation\\"
export * from \\"./spreadsheet\\"
"
`;

exports[`Functional Tests Imports: imports - document 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { Status } from \\"./enums\\"

export const DocumentModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.string(),
  status: z.nativeEnum(Status),
  created: z.date(),
  updated: z.date(),
})

export class DocumentDto extends createZodDto(DocumentModel) {
}
"
`;

exports[`Functional Tests Imports: imports - presentation 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompleteSpreadsheet, RelatedSpreadsheetModel } from \\"./index\\"

export const PresentationModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.string().array(),
  created: z.date(),
  updated: z.date(),
})

export class PresentationDto extends createZodDto(PresentationModel) {
}

export interface CompletePresentation extends z.infer<typeof PresentationModel> {
  spreadsheets: CompleteSpreadsheet[]
}

/**
 * RelatedPresentationModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedPresentationModel: z.ZodSchema<CompletePresentation> = z.lazy(() => PresentationModel.extend({
  spreadsheets: RelatedSpreadsheetModel.array(),
}))
"
`;

exports[`Functional Tests Imports: imports - spreadsheet 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompletePresentation, RelatedPresentationModel } from \\"./index\\"

export const SpreadsheetModel = z.object({
  id: z.string(),
  filename: z.string(),
  author: z.string(),
  contents: z.json(),
  created: z.date(),
  updated: z.date(),
})

export class SpreadsheetDto extends createZodDto(SpreadsheetModel) {
}

export interface CompleteSpreadsheet extends z.infer<typeof SpreadsheetModel> {
  presentations: CompletePresentation[]
}

/**
 * RelatedSpreadsheetModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedSpreadsheetModel: z.ZodSchema<CompleteSpreadsheet> = z.lazy(() => SpreadsheetModel.extend({
  presentations: RelatedPresentationModel.array(),
}))
"
`;

exports[`Functional Tests JSON: json - Index file 1`] = `
"export * from \\"./user\\"
export * from \\"./post\\"
"
`;

exports[`Functional Tests JSON: json - post 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompleteUser, RelatedUserModel } from \\"./index\\"

export const PostModel = z.object({
  id: z.number().int(),
  authorId: z.number().int(),
})

export class PostDto extends createZodDto(PostModel) {
}

export interface CompletePost extends z.infer<typeof PostModel> {
  author: CompleteUser
}

/**
 * RelatedPostModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedPostModel: z.ZodSchema<CompletePost> = z.lazy(() => PostModel.extend({
  author: RelatedUserModel,
}))
"
`;

exports[`Functional Tests JSON: json - user 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompletePost, RelatedPostModel } from \\"./index\\"

export const UserModel = z.object({
  id: z.number().int(),
  meta: z.json(),
})

export class UserDto extends createZodDto(UserModel) {
}

export interface CompleteUser extends z.infer<typeof UserModel> {
  posts: CompletePost[]
}

/**
 * RelatedUserModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedUserModel: z.ZodSchema<CompleteUser> = z.lazy(() => UserModel.extend({
  posts: RelatedPostModel.array(),
}))
"
`;

exports[`Functional Tests Optional fields: optional - Index file 1`] = `
"export * from \\"./user\\"
export * from \\"./post\\"
"
`;

exports[`Functional Tests Optional fields: optional - post 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompleteUser, RelatedUserModel } from \\"./index\\"

export const PostModel = z.object({
  id: z.number().int(),
  authorId: z.number().int(),
})

export class PostDto extends createZodDto(PostModel) {
}

export interface CompletePost extends z.infer<typeof PostModel> {
  author?: CompleteUser | null
}

/**
 * RelatedPostModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedPostModel: z.ZodSchema<CompletePost> = z.lazy(() => PostModel.extend({
  author: RelatedUserModel.nullable(),
}))
"
`;

exports[`Functional Tests Optional fields: optional - user 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompletePost, RelatedPostModel } from \\"./index\\"

export const UserModel = z.object({
  id: z.number().int(),
  meta: z.json(),
})

export class UserDto extends createZodDto(UserModel) {
}

export interface CompleteUser extends z.infer<typeof UserModel> {
  posts?: CompletePost | null
}

/**
 * RelatedUserModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedUserModel: z.ZodSchema<CompleteUser> = z.lazy(() => UserModel.extend({
  posts: RelatedPostModel.nullable(),
}))
"
`;

exports[`Functional Tests Recursive Schema: recursive - Index file 1`] = `
"export * from \\"./comment\\"
"
`;

exports[`Functional Tests Recursive Schema: recursive - comment 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const CommentModel = z.object({
  id: z.string(),
  author: z.string(),
  contents: z.string(),
  parentId: z.string(),
})

export class CommentDto extends createZodDto(CommentModel) {
}

export interface CompleteComment extends z.infer<typeof CommentModel> {
  parent: CompleteComment
  children: CompleteComment[]
}

/**
 * RelatedCommentModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedCommentModel: z.ZodSchema<CompleteComment> = z.lazy(() => CommentModel.extend({
  parent: RelatedCommentModel,
  children: RelatedCommentModel.array(),
}))
"
`;

exports[`Functional Tests Relation - 1 to 1: relation-1to1 - Index file 1`] = `
"export * from \\"./user\\"
export * from \\"./keychain\\"
"
`;

exports[`Functional Tests Relation - 1 to 1: relation-1to1 - keychain 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompleteUser, RelatedUserModel } from \\"./index\\"

export const KeychainModel = z.object({
  userID: z.string(),
})

export class KeychainDto extends createZodDto(KeychainModel) {
}

export interface CompleteKeychain extends z.infer<typeof KeychainModel> {
  owner: CompleteUser
}

/**
 * RelatedKeychainModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedKeychainModel: z.ZodSchema<CompleteKeychain> = z.lazy(() => KeychainModel.extend({
  owner: RelatedUserModel,
}))
"
`;

exports[`Functional Tests Relation - 1 to 1: relation-1to1 - user 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"
import { type CompleteKeychain, RelatedKeychainModel } from \\"./index\\"

export const UserModel = z.object({
  id: z.string(),
})

export class UserDto extends createZodDto(UserModel) {
}

export interface CompleteUser extends z.infer<typeof UserModel> {
  keychain?: CompleteKeychain | null
}

/**
 * RelatedUserModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedUserModel: z.ZodSchema<CompleteUser> = z.lazy(() => UserModel.extend({
  keychain: RelatedKeychainModel.nullable(),
}))
"
`;

exports[`Functional Tests relationModel = false: relation-false - Index file 1`] = `
"export * from \\"./user\\"
export * from \\"./post\\"
"
`;

exports[`Functional Tests relationModel = false: relation-false - post 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const PostModel = z.object({
  id: z.string(),
  title: z.string(),
  contents: z.string(),
  userId: z.string(),
})

export class PostDto extends createZodDto(PostModel) {
}
"
`;

exports[`Functional Tests relationModel = false: relation-false - user 1`] = `
"import * as z from \\"nestjs-zod/z\\"
import { createZodDto } from \\"nestjs-zod/dto\\"

export const UserModel = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
})

export class UserDto extends createZodDto(UserModel) {
}
"
`;
